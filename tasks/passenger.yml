- name: ensure passenger src and destination directories exist
  file:
    path: "{{ item }}"
    state: directory
  become: true
  loop:
  - "{{ passenger_src_dir }}"
  - "{{ ood_base_dir }}"
  - "{{ nginx_dir }}"
  - "{{ nginx_dir }}/bin"
  - "{{ nginx_dir }}/conf"
  - "{{ passenger_lib_dir }}"
  - "{{ passenger_support_binaries_dir }}"

- name: download the passenger tars
  get_url:
    url: "{{ item }}"
    dest: "{{ passenger_src_dir }}"
  when: passenger_remote_dl | bool
  loop:
  - "{{ passenger_url }}"
  - "{{ passenger_nginx_url }}"
  - "{{ passenger_agent_url }}"

- name: extract the passenger tars
  unarchive:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    remote_src: yes
  become: true
  loop:
  - { src: "{{ passenger_src_dir }}/{{ passenger_tar }}", dest: "{{ ood_base_dir }}" }
  - { src: "{{ passenger_src_dir }}/{{ agent_tar }}", dest: "{{ passenger_support_binaries_dir }}" }
  - { src: "{{ passenger_src_dir }}/{{ nginx_tar }}", dest: "{{ nginx_dir }}/bin" }

- name: copy nginx mime types files
  copy:
    src: "mime.types"
    dest: "{{ nginx_dir }}/conf"
  become: true

- name: symlink passenger directory and nginx binary
  file:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    force: yes
    state: link
  become: true
  loop:
  - { src: "{{ nginx_dir }}/bin/nginx-{{ nginx_version }}", dest: "{{ nginx_dir }}/bin/nginx" }
  - { src: "{{ ood_base_dir }}/passenger-{{ passenger_version }}", dest: "{{ passenger_base_dir }}" }

- name: make nginx config dirs
  file:
    path: "{{ item }}"
    state: directory
  become: true
  loop:
  - "{{ nginx_lib_dir }}"
  - "{{ nginx_config_dir }}"
  - "{{ nginx_puns_dir }}"
  - "{{ nginx_apps_dir }}"
  - "{{ nginx_apps_dir }}/sys"
  - "{{ nginx_apps_dir }}/usr"
  - "{{ nginx_apps_dir }}/dev"

- name: template locations file
  template:
    src: "locations.ini.j2"
    dest: "{{ passenger_lib_dir }}/locations.ini"
  become: true